  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '0', '1', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADC{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("adc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADC{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("adc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '1', '0', '1', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADCS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("adc");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ADC{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("adc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADC{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("adc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("adc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['0', '0', '0', '1', '1', '1', '0', 'imm#3', 'Rn#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'ADDS <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("add");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *add3

  - encoding: ['0', '0', '1', '1', '0', 'Rdn#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ADDS <Rdn>, #<imm>'
    decoder: |

      insn.mnem.set("add");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *add3

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '0', '0', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c>.W <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *add3

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '0', '0', '0', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: [ 'could_jmp' ]
    format: 'ADDW<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("addw");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: *add3

  - encoding: ['0', '0', '0', '1', '1', '0', '0', 'Rm#3', 'Rn#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADDS <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("add");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *add3

  - encoding: ['0', '1', '0', '0', '0', '1', '0', '0', 'DN#1', 'Rm#4', 'Rdn#3']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ADD<c> <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("add");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *add2

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: *add3

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '0', '1', '0', '1', 'Rd#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADD<c> <Rd>, SP, #<imm>'
    decoder: |

      insn.mnem.set("add");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: *add3

  - encoding: ['1', '0', '1', '1', '0', '0', '0', '0', '0', 'imm#7']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ADD<c> SP, SP, #<imm>'
    decoder: |

      insn.mnem.set("add");
      insn.add_attr("support-it-block");
      not_implemented("operand: SP");
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: *add3

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '0', '0', '0', 'S#1', '1', '1', '0', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c>.W <Rd>, SP, #<imm>'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: [ 'could_jmp' ]
    format: 'ADDW<c> <Rd>, SP, #<imm>'
    decoder: |

      insn.mnem.set("addw");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '0', '0', 'S#1', '1', '1', '0', '1', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c> <Rd>, SP, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: *add3

  - encoding: ['0', '1', '0', '0', '0', '1', '0', '0', 'DM#1', '1', '1', '0', '1', 'Rdm#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADD<c> <Rdm>, SP'
    decoder: |

      insn.mnem.set("add");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rdm", field("Rdm"))));
      not_implemented("operand: SP");


    semantic: *add2

  - encoding: ['0', '1', '0', '0', '0', '1', '0', '0', '1', 'Rm#4', '1', '0', '1']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ADD<c> SP,<Rm>'
    decoder: |

      insn.mnem.set("add");
      insn.add_attr("support-it-block");
      not_implemented("operand: SP,<Rm>");


    semantic: *add2

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', 'S#1', '1', '1', '0', '1', '0', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c>.W <Rd>, SP, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: *add3

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '0', 'S#1', '1', '1', '0', '1', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADD{S}<c> <Rd>, SP, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("add");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: *add3

  - encoding: ['1', '0', '1', '0', '0', 'Rd#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ADR<c> <Rd>, <label>'
    decoder: |

      insn.mnem.set("adr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <label>");


    semantic: *adr

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SUB <Rd>, PC, #0'
    decoder: |

      insn.mnem.set("sub");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: PC");
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'ADR<c>.W <Rd>, <label>'
    decoder: |

      insn.mnem.set("adr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <label>");


    semantic: *adr

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ADR<c> <Rd>, <arm_expand_label>'
    decoder: |

      insn.mnem.set("adr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <arm_expand_label>");


    semantic: *adr

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'SUB <Rd>, PC, #0'
    decoder: |

      insn.mnem.set("sub");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: PC");
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '0', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'AND{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("and");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'AND{S}<c> <Rd>, <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("and");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '0', '0', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ANDS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("and");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'AND{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("and");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'AND{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("and");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'AND{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("and");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['0', '0', '0', '1', '0', 'imm#5', 'Rm#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ASRS <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("asr");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ASR{S}<c>.W <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("asr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#5', '1', '0', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ASR{S}<c> <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("asr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '1', '0', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ASRS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("asr");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', 'S#1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ASR{S}<c>.W <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("asr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'Rm#4', '0', '1', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ASR{S}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("asr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '0', '1', 'cond#4', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'jmp' ]
    format: 'B<c> <thumb_branch_label>'
    decoder: |

      insn.mnem.set("b");
      insn.add_attr("support-it-block");
      not_implemented("operand: <thumb_branch_label>");


    semantic: *b

  - encoding: ['1', '1', '1', '0', '0', 'imm#11']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'jmp' ]
    format: 'B<c> <thumb_branch_label>'
    decoder: |

      insn.mnem.set("b");
      insn.add_attr("support-it-block");
      not_implemented("operand: <thumb_branch_label>");


    semantic: *b

  - encoding: ['1', '1', '1', '1', '0', 'S#1', 'cond#4', 'imm#6', '1', '0', 'J1#1', '0', 'J2#1', 'imm#11']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'jmp' ]
    format: 'B<c>.W <thumb_branch_label>'
    decoder: |

      insn.mnem.set("b");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <thumb_branch_label>");


    semantic: *b

  - encoding: ['1', '1', '1', '1', '0', 'S#1', 'imm#10', '1', '0', 'J1#1', '1', 'J2#1', 'imm#11']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: ['jmp']
    format: 'B<c>.W <thumb_branch_label>'
    decoder: |

      insn.mnem.set("b");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <thumb_branch_label>");


    semantic: *b

  - encoding: ['cond#4', '1', '0', '1', '0', 'imm#24']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'jmp' ]
    format: 'B<c> <arm_branch_label>'
    decoder: |

      insn.mnem.set("b");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <arm_branch_label>");


    semantic: *b

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'msb#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'BFC<c> <Rd>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("bfc");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '1', '0', 'msb#5', 'Rd#4', 'lsb#5', '0', '0', '1', '1', '1', '1', '1']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'BFC<c> <Rd>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("bfc");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '0', '1', '1', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'msb#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'BFI<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("bfi");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '1', '0', 'msb#5', 'Rd#4', 'lsb#5', '0', '0', '1', 'Rn#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'BFI<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("bfi");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '0', '1', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'BIC{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("bic");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'BIC{S}<c> <Rd>, <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("bic");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '1', '1', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'BICS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("bic");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '1', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'BIC{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("bic");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'BIC{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("bic");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'BIC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("bic");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'BKPT #<imm>'
    decoder: |

      insn.mnem.set("bkpt");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', 'imm#12', '0', '1', '1', '1', 'imm#4']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'BKPT #<imm>'
    decoder: |

      insn.mnem.set("bkpt");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'S#1', 'imm#10', '1', '1', 'J1#1', '1', 'J2#1', 'imm#11']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'call' ]
    format: 'BL<c> <thumb_branch_label>'
    decoder: |

      insn.mnem.set("bl");
      insn.add_attr("support-it-block");
      not_implemented("operand: <thumb_branch_label>");


    semantic: *bl

  - encoding: ['1', '1', '1', '1', '0', 'S#1', 'imm_h#10', '1', '1', 'J1#1', '0', 'J2#1', 'imm_l#10', '0']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'thumb_branch_label' ]
    format: 'BLX<c> <label>'
    decoder: |

      insn.mnem.set("blx");
      insn.add_attr("support-it-block");
      not_implemented("operand: <label>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '1', '1', 'imm#24']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'call' ]
    format: 'BL<c> <arm_branch_label>'
    decoder: |

      insn.mnem.set("bl");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <arm_branch_label>");


    semantic: *bl

  - encoding: ['1', '1', '1', '1', '1', '0', '1', 'H#1', 'imm#24']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: [ 'call' ]
    format: 'BLX <arm_branch_label>'
    decoder: |

      insn.mnem.set("blx");
      not_implemented("operand: <arm_branch_label>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '1', '1', '1', '1', 'Rm#4', '(0)', '(0)', '(0)']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'call' ]
    format: 'BLX<c> <Rm>'
    decoder: |

      insn.mnem.set("blx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'call' ]
    format: 'BLX<c> <Rm>'
    decoder: |

      insn.mnem.set("blx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '1', '1', '1', '0', 'Rm#4', '(0)', '(0)', '(0)']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'call' ]
    format: 'BX<c> <Rm>'
    decoder: |

      insn.mnem.set("bx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'call' ]
    format: 'BX<c> Rm'
    decoder: |

      insn.mnem.set("bx");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: Rm");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', 'Rm#4', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'call', 'change_to_jazelle' ]
    format: 'BXJ<c> <Rm>'
    decoder: |

      insn.mnem.set("bxj");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv5TEJ', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'call' ]
    format: 'BXJ<c> <Rm>'
    decoder: |

      insn.mnem.set("bxj");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', 'op#1', '0', 'imm#1', '1', 'imm#5', 'Rn#3']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'cond', 'jmp' ]
    format: 'CB{N}Z <Rn>, <label>'
    decoder: |

      insn.mnem.set("cb");
      if (field("op"))
        insn.mnem.set_cond("nz");
      else
        insn.mnem.set_cond("z");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <label>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', 'opc1#4', 'CRn#4', 'CRd#4', 'coproc#4', 'opc2#3', '0', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block']
    format: 'CDP<c> <coproc>, <opc1>, <CRd>, <CRn>, <CRm>, <opc2>'
    decoder: |

      insn.mnem.set("cdp");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>");
      not_implemented("operand: <opc2>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', 'opc1#4', 'CRn#4', 'CRd#4', 'coproc#4', 'opc2#3', '0', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: []
    format: 'CDP<c> <coproc>, <opc1>, <CRd>, <CRn>, <CRm>, <opc2>'
    decoder: |

      insn.mnem.set("cdp");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>");
      not_implemented("operand: <opc2>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#4', 'CRn#4', 'CRd#4', 'coproc#4', 'opc2#3', '0', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block']
    format: 'CDP2<c> <coproc>, <opc1>, <CRd>, <CRn>, <CRm>, <opc2>'
    decoder: |

      insn.mnem.set("cdp2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>");
      not_implemented("operand: <opc2>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#4', 'CRn#4', 'CRd#4', 'coproc#4', 'opc2#3', '0', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: ['support_it_block']
    format: 'CDP2<c> <coproc>, <opc1>, <CRd>, <CRn>, <CRm>, <opc2>'
    decoder: |

      insn.mnem.set("cdp2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>");
      not_implemented("operand: <opc2>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '0', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'CLREX<c>'
    decoder: |

      insn.mnem.set("clrex");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: []
    format: 'CLREX'
    decoder: |

      insn.mnem.set("clrex");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', 'RmDup#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'CLZ<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("clz");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '1', '0', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'CLZ<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("clz");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '0', '0', '0', '1', 'Rn#4', '0', 'imm#3', '1', '1', '1', '1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'cond' ]
    format: 'CMN<c> <Rn>, #<thumb_expand_imm>'
    decoder: |

      insn.mnem.set("cmn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<thumb_expand_imm>");


    semantic: *cmn

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '1', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMN<c> <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("cmn");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: *cmn

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '0', '1', '1', 'Rm#3', 'Rn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'cond' ]
    format: 'CMN<c> <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("cmn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *cmn

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', 'Rn#4', '(0)', 'imm#3', '1', '1', '1', '1', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'cond' ]
    format: 'CMN<c>.W <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("cmn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMN<c> <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("cmn");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: *cmn

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMN<c> <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("cmn");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: *cmn

  - encoding: ['0', '0', '1', '0', '1', 'Rn#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("cmp");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '1', '0', '1', '1', 'Rn#4', '0', 'imm#3', '1', '1', '1', '1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'cond' ]
    format: 'CMP<c>.W <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("cmp");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '1', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("cmp");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '0', '1', '0', 'Rm#3', 'Rn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("cmp");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '1', '0', '1', 'N#1', 'Rm#4', 'Rn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("cmp");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', 'Rn#4', '(0)', 'imm#3', '1', '1', '1', '1', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'cond' ]
    format: 'CMP<c>.W <Rn>, <Rm> {,<shift>}'
    decoder: |

      insn.mnem.set("cmp");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: {,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("cmp");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'cond' ]
    format: 'CMP<c> <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("cmp");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '1', '1', '1', '1', 'option#4']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T1
    attribute: []
    format: 'DBG<c> #<option>'
    decoder: |

      insn.mnem.set("dbg");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '1', '1', '1', '1', 'option#4']
    processor: ['ARMv7', 'ARMv6Kand', 'ARMv6T2)']
    mode: A1
    attribute: []
    format: 'DBG<c> #<option>'
    decoder: |

      insn.mnem.set("dbg");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'option#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'DMB<c> #<option>'
    decoder: |

      insn.mnem.set("dmb");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '1', 'option#4']
    processor: ['ARMv7']
    mode: A1
    attribute: []
    format: 'DMB #<option>'
    decoder: |

      insn.mnem.set("dmb");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '0', 'option#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'DSB<c> #<option>'
    decoder: |

      insn.mnem.set("dsb");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '0', 'option#4']
    processor: ['ARMv7']
    mode: A1
    attribute: []
    format: 'DSB #<option>'
    decoder: |

      insn.mnem.set("dsb");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '1', '0', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'EOR{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("eor");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'EOR{S}<c> <Rd>, <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("eor");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '0', '0', '1', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'EORS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("eor");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'EOR{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("eor");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'EOR{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("eor");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '1', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'EOR{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("eor");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '0', 'option#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'ISB<c> #<option>'
    decoder: |

      insn.mnem.set("isb");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '1', '1', '0', 'option#4']
    processor: ['ARMv7']
    mode: A1
    attribute: []
    format: 'ISB #<option>'
    decoder: |

      insn.mnem.set("isb");
      insn.add_oprd(int(32, field("option")));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', 'firstcond#4', 'mask#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'IT{x{y{z}}} <firstcond>'
    decoder: |

      insn.mnem.set("it");
    /* TODO IT-suffix */
      not_implemented("operand: <firstcond>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block']
    format: 'LDC{L}<c> <coproc>, <CRd>, [<Rn>, #+/-<imm>]{!}'
    decoder: |

      insn.mnem.set("ldc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'LDC{L}<c> <coproc>, <CRd>, [<Rn>],<option>'
    decoder: |

      insn.mnem.set("ldc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [<Rn>],<option>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block']
    format: 'LDC2{L}<c> <coproc>, <CRd>, [<Rn>, #+/-<imm>]{!}'
    decoder: |

      insn.mnem.set("ldc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: ['support_it_block', 'support_it_block']
    format: 'LDC2{L}<c> <coproc>, <CRd>, [<Rn>],<option>'
    decoder: |

      insn.mnem.set("ldc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [<Rn>],<option>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', '1', '1', '1', '1', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block']
    format: 'LDC{L}<c> <coproc>, <CRd>, <label>'
    decoder: |

      insn.mnem.set("ldc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <label>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', '1', '1', '1', '1', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'LDC{L}<c> <coproc>, <CRd>, [PC],<option>'
    decoder: |

      insn.mnem.set("ldc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [PC],<option>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', '1', '1', '1', '1', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block']
    format: 'LDC2{L}<c> <coproc>, <CRd>, <label>'
    decoder: |

      insn.mnem.set("ldc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: <label>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', '1', '1', '1', '1', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: ['support_it_block', 'support_it_block']
    format: 'LDC2{L}<c> <coproc>, <CRd>, [PC],<option>'
    decoder: |

      insn.mnem.set("ldc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [PC],<option>");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', 'Rn#3', 'register_list#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDM<c> <Rn>, <registers>'
    decoder: |

      insn.mnem.set("ldm");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '0', 'W#1', '1', 'Rn#4', 'P#1', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDM<c>.W <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldm");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '0', '1', '0', 'W#1', '1', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDM<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldm");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '0', '0', '0', 'W#1', '1', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDMDA<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldmda");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '1', '0', '0', 'W#1', '1', 'Rn#4', 'P#1', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDMDB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldmdb");
      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '1', '0', '0', 'W#1', '1', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDMDB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldmdb");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '1', '1', '0', 'W#1', '1', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDMIB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("ldmib");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['0', '1', '1', '0', '1', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *ldr

  - encoding: ['1', '0', '0', '1', '1', 'Rt#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [SP{,#<disp>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [SP{,#<disp>}]");


    semantic: *ldr

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'LDR<c>.W <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *ldr

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldr

  - encoding: ['cond#4', '0', '1', '0', 'P#1', 'U#1', '0', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldr

  - encoding: ['0', '1', '0', '0', '1', 'Rt#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, <label>'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <label>");


    semantic: *ldr

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', 'U#1', '1', '0', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDR<c>.W <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, reg("pc")));


    semantic: *ldr

  - encoding: ['cond#4', '0', '1', '0', '(1)', 'U#1', '0', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, <u_label>'
    decoder: |

      insn.mnem.set("ldr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <u_label>");


    semantic: *ldr

  - encoding: ['0', '1', '0', '1', '1', '0', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *ldr

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDR<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: *ldr

  - encoding: ['cond#4', '0', '1', '1', 'P#1', 'U#1', '0', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDR<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("ldr");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: *ldr

  - encoding: ['0', '1', '1', '1', '1', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *ldrb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c>.W <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldrb

  - encoding: ['cond#4', '0', '1', '0', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldrb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', 'U#1', '0', '0', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, reg("pc")));


    semantic: *ldrb

  - encoding: ['cond#4', '0', '1', '0', '(1)', 'U#1', '1', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, reg("pc")));


    semantic: *ldrb

  - encoding: ['0', '1', '0', '1', '1', '1', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *ldrb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("ldrb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRB<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("ldrb");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: *ldrb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRBT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrbt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '0', '0', 'U#1', '1', '1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRBT<c> <Rt>, [<Rn>], #<imm>'
    decoder: |

      insn.mnem.set("ldrbt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', 'U#1', '1', '1', '1', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'LDRBT<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("ldrbt");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'Rt2#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRD<c> <Rt>, <Rt2>, [<Rn>, #+/-<imm>]!'
    decoder: |

      insn.mnem.set("ldrd");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '0', '1', 'imm_l#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRD<c> <Rt>, <Rt2>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', 'P#1', 'U#1', '1', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'Rt2#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRD<c> <Rt>, <Rt2>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, reg("pc")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '(1)', 'U#1', '1', '(0)', '0', '1', '1', '1', '1', 'Rt#4', 'imm_h#4', '1', '1', '0', '1', 'imm_l#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRD<c> <Rt>, <Rt2>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, reg("pc")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '0', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '0', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRD<c> <Rt>, <Rt2>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("ldrd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDREX<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldrex");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '0', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDREX<c> <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrex");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '0', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDREXB<c> <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '0', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDREXB<c> <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', 'Rn#4', 'Rt#4', 'Rt2#4', '0', '1', '1', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDREXD<c> <Rt>, <Rt2>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDREXD<c> <Rt>, <Rt2>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDREXH<c> <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '1', '1', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', '(1)', '(1)', '(1)', '(1)']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDREXH<c> <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("ldrexh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '0', '0', '0', '1', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *ldrh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c>.W <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldrh

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '0', '1', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *ldrh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', 'U#1', '0', '1', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg("pc")));


    semantic: *ldrh

  - encoding: ['cond#4', '0', '0', '0', '(1)', 'U#1', '1', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'imm_h#4', '1', '0', '1', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg("pc")));


    semantic: *ldrh

  - encoding: ['0', '1', '0', '1', '1', '0', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *ldrh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRH<c> <Rt>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("ldrh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *ldrh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRHT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrht");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '1', '1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '0', '1', '1', 'imm_l#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRHT<c> <Rt>, [<Rn>] {,#<disp>}'
    decoder: |

      insn.mnem.set("ldrht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {,#<disp>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '0', '1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'LDRHT<c> <Rt>, [<Rn>], +/-<Rm>'
    decoder: |

      insn.mnem.set("ldrht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: +/-<Rm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '0', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', 'U#1', '0', '0', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, reg("pc")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '(1)', 'U#1', '1', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'imm_h#4', '1', '1', '0', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, reg("pc")));


    semantic: []

  - encoding: ['0', '1', '0', '1', '0', '1', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '0', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSB<c> <Rt>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("ldrsb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSBT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrsbt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '1', '1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '0', '1', 'imm_l#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSBT<c> <Rt>, [<Rn>] {,#<disp>}'
    decoder: |

      insn.mnem.set("ldrsbt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {,#<disp>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '0', '1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'LDRSBT<c> <Rt>, [<Rn>], +/-<Rm>'
    decoder: |

      insn.mnem.set("ldrsbt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: +/-<Rm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '1', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', 'U#1', '0', '1', '1', '1', '1', '1', '1', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg("pc")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '(1)', 'U#1', '1', '(0)', '1', '1', '1', '1', '1', 'Rt#4', 'imm_h#4', '1', '1', '1', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [PC,#-0]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg("pc")));


    semantic: []

  - encoding: ['0', '1', '0', '1', '1', '1', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSH<c> <Rt>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRSHT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrsht");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '1', '1', '1', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '1', '1', 'imm_l#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRSHT<c> <Rt>, [<Rn>] {,#<disp>}'
    decoder: |

      insn.mnem.set("ldrsht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {,#<disp>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '0', '1', '1', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'LDRSHT<c> <Rt>, [<Rn>], +/-<Rm>'
    decoder: |

      insn.mnem.set("ldrsht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: +/-<Rm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LDRT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("ldrt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '0', '0', 'U#1', '0', '1', '1', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LDRT<c> <Rt>, [<Rn>] {,#<disp>}'
    decoder: |

      insn.mnem.set("ldrt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {,#<disp>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', 'U#1', '0', '1', '1', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'LDRT<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("ldrt");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: []

  - encoding: ['0', '0', '0', '0', '0', 'imm#5', 'Rm#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LSLS <Rd>, <Rm>, #<imm5>'
    decoder: |

      insn.mnem.set("lsl");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: #<imm5>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LSL{S}<c>.W <Rd>, <Rm>, #<imm5>'
    decoder: |

      insn.mnem.set("lsl");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: #<imm5>");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#5', '0', '0', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LSL{S}<c> <Rd>, <Rm>, #<imm5>'
    decoder: |

      insn.mnem.set("lsl");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: #<imm5>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '0', '1', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LSLS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("lsl");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', 'S#1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LSL{S}<c>.W <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("lsl");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'Rm#4', '0', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LSL{S}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("lsl");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['0', '0', '0', '0', '1', 'imm#5', 'Rm#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'LSRS <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("lsr");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LSR{S}<c>.W <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("lsr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#5', '0', '1', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LSR{S}<c> <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("lsr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '0', '1', '1', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'support_it_block', 'could_jmp' ]
    format: 'LSRS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("lsr");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', 'S#1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'LSR{S}<c>.W <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("lsr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'Rm#4', '0', '0', '1', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'LSR{S}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("lsr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', 'opc1#3', '0', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block', 'could_jmp' ]
    format: 'MCR<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mcr");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', 'opc1#3', '0', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: []
    format: 'MCR<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mcr");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#3', '0', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block', 'could_jmp']
    format: 'MCR2<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mcr2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#3', '0', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'MCR2<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mcr2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '0', '0', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block', 'could_jmp']
    format: 'MCRR<c> <coproc>, <opc1>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mcrr");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '0', '1', '0', '0', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MCRR<c> <coproc>, <opc1>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mcrr");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block', 'could_jmp']
    format: 'MCRR2<c> <coproc>, <opc1>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mcrr2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'MCRR2<c> <coproc>, <opc1>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mcrr2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MLA<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("mla");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '1', 'S#1', 'Rd#4', 'Ra#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MLA{S}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("mla");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MLS<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("ml");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '1', '0', 'Rd#4', 'Ra#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MLS<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("ml");
      insn.mnem.add_suffix("s");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['0', '0', '1', '0', '0', 'Rd#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MOVS <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("mov");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *mov

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'MOV{S}<c>.W <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("mov");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *mov

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '0', '1', '0', '0', 'imm#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'MOVW<c> <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("movw");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *movw

  - encoding: ['cond#4', '0', '0', '1', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MOV{S}<c> <Rd>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("mov");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: *mov

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '0', '0', 'imm#4', 'Rd#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'MOVW<c> <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("movw");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *movw

  - encoding: ['0', '1', '0', '0', '0', '1', '1', '0', 'D#1', 'Rm#4', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MOV<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("mov");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *mov

  - encoding: ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'Rm#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'MOVS <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("mov");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *mov

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', '0', '0', '0', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'MOV{S}<c>.W <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("mov");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *mov

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', '0', '0', '0', '0', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MOV{S}<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("mov");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: *mov

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '1', '1', '0', '0', 'imm#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MOVT<c> <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("movt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *movt

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '1', '0', '0', 'imm#4', 'Rd#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MOVT<c> <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("movt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: *movt

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', 'opc1#3', '1', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block', 'could_jmp']
    format: 'MRC<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mrc");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', 'opc1#3', '1', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MRC<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mrc");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#3', '1', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block', 'could_jmp']
    format: 'MRC2<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mrc2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '0', 'opc1#3', '1', 'CRn#4', 'Rt#4', 'coproc#4', 'opc2#3', '1', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'MRC2<c> <coproc>, <opc1>, <Rt>, <CRn>, <CRm>{,<opc2>}'
    decoder: |

      insn.mnem.set("mrc2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <CRn>");
      not_implemented("operand: <CRm>{,<opc2>}");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '0', '1', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block', 'could_jmp']
    format: 'MRRC<c> <coproc>, <opc>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mrrc");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '0', '1', '0', '1', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MRRC<c> <coproc>, <opc>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mrrc");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block', 'could_jmp']
    format: 'MRRC2<c> <coproc>, <opc>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mrrc2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', 'Rt2#4', 'Rt#4', 'coproc#4', 'opc1#4', 'CRm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: [ 'could_jmp' ]
    format: 'MRRC2<c> <coproc>, <opc>, <Rt>, <Rt2>, <CRm>'
    decoder: |

      insn.mnem.set("mrrc2");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <opc>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: <CRm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MRS<c> <Rd>, <spec_reg>'
    decoder: |

      insn.mnem.set("mr");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <spec_reg>");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '(0)', '(0)', '(0)', '(0)']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MRS<c> <Rd>, <spec_reg>'
    decoder: |

      insn.mnem.set("mr");
      insn.mnem.add_suffix("s");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <spec_reg>");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', 'mask#2', '0', '0', '(1)', '(1)', '(1)', '(1)', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'MSR<c> <spec_reg>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("msr");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <spec_reg>");
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '0', '0', 'Rn#4', '1', '0', '(0)', '0', 'mask#2', '0', '0', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'MSR<c> <spec_reg>, <Rn>'
    decoder: |

      insn.mnem.set("msr");
      insn.add_attr("support-it-block");
      not_implemented("operand: <spec_reg>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', 'mask#2', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'MSR<c> <spec_reg>, <Rn>'
    decoder: |

      insn.mnem.set("msr");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <spec_reg>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '1', '0', '1', 'Rn#3', 'Rdm#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MULS <Rdm>, <Rn>'
    decoder: |

      insn.mnem.set("mul");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdm", field("Rdm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'MUL<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("mul");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '0', '0', 'S#1', 'Rd#4', '(0)', '(0)', '(0)', '(0)', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MUL{S}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("mul");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '1', '1', 'S#1', '1', '1', '1', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MVN{S}<c> <Rd>, #<imm>'
    decoder: |

      insn.mnem.set("mvn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '1', '1', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MVN{S}<c> <Rd>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("mvn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '1', '1', '1', 'Rm#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'MVNS <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("mvn");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '1', 'S#1', '1', '1', '1', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'MVN{S}<c>.W <Rd>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("mvn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MVN{S}<c> <Rd>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("mvn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'MVN{S}<c> <Rd>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("mvn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'NOP<c>'
    decoder: |

      insn.mnem.set("nop");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'NOP<c>.W'
    decoder: |

      insn.mnem.set("nop");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '0', '0', '0', '0']
    processor: ['ARMv6K', 'ARMv6T2', 'ARMv7']
    mode: A1
    attribute: []
    format: 'NOP<c>'
    decoder: |

      insn.mnem.set("nop");
      insn.set_cond(arm.Condition(field("cond")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '1', '1', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ORN{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("orn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '1', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ORN{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("orn");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '1', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ORR{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("orr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ORR{S}<c> <Rd>, <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("orr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '1', '0', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ORRS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("orr");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ORR{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("orr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ORR{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("orr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ORR{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("orr");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'tb#1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'PKHTB<c> <Rd>, <Rn>, <Rm>{,ASR #<imm>}'
    decoder: |

      insn.mnem.set("pkhtb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,ASR");
      not_implemented("operand: #<imm>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '0', '0', 'Rn#4', 'Rd#4', 'imm#5', 'tb#1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'PKHTB<c> <Rd>, <Rn>, <Rm>{,ASR #<imm>}'
    decoder: |

      insn.mnem.set("pkhtb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,ASR");
      not_implemented("operand: #<imm>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', 'U#1', '0', '(0)', '1', '1', '1', '1', '1', '1', '1', '1', '1', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'PLD<c> [PC,#-0]'
    decoder: |

      insn.mnem.set("pld");
      insn.add_attr("support-it-block");
      insn.add_oprd(mem(64, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '1', 'U#1', '(1)', '0', '1', '1', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', 'imm#12']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'PLD [PC,#-0]'
    decoder: |

      insn.mnem.set("pld");
      insn.add_oprd(mem(64, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'imm#12']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'PLI<c> [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("pli");
      insn.add_attr("support-it-block");
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', '1', '1', '0', '0', 'imm#8']
    processor: ['ARMv7']
    mode: T2
    attribute: []
    format: 'PLI<c> [<Rn>,#-<imm>]'
    decoder: |

      insn.mnem.set("pli");
      insn.add_attr("support-it-block");
      not_implemented("operand: [<Rn>,#-<imm>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', 'U#1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', 'imm#12']
    processor: ['ARMv7']
    mode: T3
    attribute: []
    format: 'PLI<c> [PC,#-0]'
    decoder: |

      insn.mnem.set("pli");
      insn.add_attr("support-it-block");
      insn.add_oprd(mem(32, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', 'U#1', '1', '0', '1', 'Rn#4', '(1)', '(1)', '(1)', '(1)', 'imm#12']
    processor: ['ARMv7']
    mode: A1
    attribute: []
    format: 'PLI [PC,#-0]'
    decoder: |

      insn.mnem.set("pli");
      insn.add_oprd(mem(32, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'PLI<c> [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("pli");
      insn.add_attr("support-it-block");
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '1', '0', 'U#1', '1', '0', '1', 'Rn#4', '(1)', '(1)', '(1)', '(1)', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv7']
    mode: A1
    attribute: []
    format: 'PLI [<Rn>,+/-<Rm>{,<shift>}]'
    decoder: |

      insn.mnem.set("pli");
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '0', 'P#1', 'register_list#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_ret' ]
    format: 'POP<c> <registers>'
    decoder: |

      insn.mnem.set("pop");
      insn.add_attr("support-it-block");
      not_implemented("operand: <registers>");


    semantic: *pop

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '1', 'P#1', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_ret' ]
    format: 'POP<c>.W <registers>'
    decoder: |

      insn.mnem.set("pop");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <registers>");


    semantic: *pop

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', 'Rt#4', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_ret' ]
    format: 'POP<c>.W <Rt>'
    decoder: |

      insn.mnem.set("pop");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: *pop

  - encoding: ['cond#4', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '1', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_ret' ]
    format: 'POP<c> <registers>'
    decoder: |

      insn.mnem.set("pop");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <registers>");


    semantic: *pop

  - encoding: ['cond#4', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '0', '1', 'Rt#4', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: [ 'could_ret' ]
    format: 'POP<c> <Rt>'
    decoder: |

      insn.mnem.set("pop");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: *pop

  - encoding: ['1', '0', '1', '1', '0', '1', '0', 'M#1', 'register_list#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'PUSH<c> <registers>'
    decoder: |

      insn.mnem.set("push");
      insn.add_attr("support-it-block");
      not_implemented("operand: <registers>");


    semantic: *push

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '(0)', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'PUSH<c>.W <registers>'
    decoder: |

      insn.mnem.set("push");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <registers>");


    semantic: *push

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '1', 'Rt#4', '1', '1', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: []
    format: 'PUSH<c>.W <Rt>'
    decoder: |

      insn.mnem.set("push");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: *push

  - encoding: ['cond#4', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0', '1', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'PUSH<c> <registers>'
    decoder: |

      insn.mnem.set("push");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <registers>");


    semantic: *push

  - encoding: ['cond#4', '0', '1', '0', '1', '0', '0', '1', '0', '1', '1', '0', '1', 'Rt#4', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: []
    format: 'PUSH<c> <Rt>'
    decoder: |

      insn.mnem.set("push");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: *push

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QADD<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qadd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '0', '0', 'Rn#4', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QADD<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qadd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QDADD<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qdadd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '0', '0', 'Rn#4', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QDADD<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qdadd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QDSUB<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qdsub");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QDSUB<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qdsub");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QSUB<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qsub");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(0)', '(0)', '(0)', '(0)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QSUB<c> <Rd>, <Rm>, <Rn>'
    decoder: |

      insn.mnem.set("qsub");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'QSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'QSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("qsub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'RmDup#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'RBIT<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rbit");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RBIT<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rbit");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '0', '1', '0', '0', '0', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'REV<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'RmDup#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'REV<c>.W <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'REV<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '0', '1', '0', '0', '1', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'REV16<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'RmDup#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'REV16<c>.W <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev16");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'REV16<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rev16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '0', '1', '0', '1', '1', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'REVSH<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("revsh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'RmDup#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'REVSH<c>.W <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("revsh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '1', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'REVSH<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("revsh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'ROR{S}<c> <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("ror");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'imm#5', '1', '1', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ROR{S}<c> <Rd>, <Rm>, #<imm>'
    decoder: |

      insn.mnem.set("ror");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '1', '1', '1', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'RORS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("ror");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', 'S#1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'ROR{S}<c>.W <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ror");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', 'Rm#4', '0', '1', '1', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'ROR{S}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ror");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '1', '1', '(0)', '0', '0', '0', 'Rd#4', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'RRX{S}<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rrx");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', 'S#1', '(0)', '(0)', '(0)', '(0)', 'Rd#4', '0', '0', '0', '0', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RRX{S}<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("rrx");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '0', '0', '1', 'Rn#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'RSBS <Rd>, <Rn>, #0'
    decoder: |

      insn.mnem.set("rsb");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '1', '1', '0', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'RSB{S}<c>.W <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("rsb");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSB{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("rsb");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'RSB{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("rsb");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSB{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("rsb");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSB{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("rsb");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSC{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("rsc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSC{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("rsc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '1', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'RSC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("rsc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '0', '1', '1', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SBC{S}<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("sbc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SBC{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("sbc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '0', '1', '1', '0', 'Rm#3', 'Rdn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SBCS <Rdn>, <Rm>'
    decoder: |

      insn.mnem.set("sbc");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SBC{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sbc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SBC{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sbc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SBC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("sbc");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '0', '1', '0', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'widthm1#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SBFX<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("sbfx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '0', '1', 'widthm1#5', 'Rd#4', 'lsb#5', '1', '0', '1', 'Rn#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SBFX<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("sbfx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', 'Rn#4', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv7-R']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SDIV<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sdiv");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SEL<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sel");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '0', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SEL<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sel");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '1', '1', '0', '0', '1', '0', '(1)', 'E#1', '(0)', '(0)', '(0)']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'SETEND <endian_specifier>'
    decoder: |

      insn.mnem.set("setend");
      not_implemented("operand: <endian_specifier>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0', '(0)', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)', '(0)', '(0)', 'E#1', '(0)', '0', '0', '0', '0', '(0)', '(0)', '(0)', '(0)']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'SETEND <endian_specifier>'
    decoder: |

      insn.mnem.set("setend");
      not_implemented("operand: <endian_specifier>");


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T1
    attribute: []
    format: 'SEV<c>'
    decoder: |

      insn.mnem.set("sev");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T2
    attribute: []
    format: 'SEV<c>.W'
    decoder: |

      insn.mnem.set("sev");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '0', '1', '0', '0']
    processor: ['ARMv6K', 'ARMv7', 'ARMv6T2)']
    mode: A1
    attribute: []
    format: 'SEV<c>'
    decoder: |

      insn.mnem.set("sev");
      insn.set_cond(arm.Condition(field("cond")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SHSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SHSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("shsub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '1', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', 'N#1', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLA<x><y><c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smla");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '0', '0', 'Rd#4', 'Ra#4', 'Rm#4', '1', 'M#1', 'N#1', '0', 'Rn#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLA<x><y><c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smla");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '0', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLAD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlad");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '0', '0', '0', 'Rd#4', 'Ra#4', 'Rm#4', '0', '0', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLAD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlad");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlal");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '1', 'S#1', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLAL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlal");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '1', '0', 'N#1', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLAL<x><y><c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlal");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '0', '0', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', 'M#1', 'N#1', '0', 'Rn#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLAL<x><y><c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlal");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '1', '1', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLALD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlald");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '1', '0', '0', 'RdHi#4', 'RdLo#4', 'Rm#4', '0', '0', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLALD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlald");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '1', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLAW<y><c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlaw");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', 'Rd#4', 'Ra#4', 'Rm#4', '1', 'M#1', '0', '0', 'Rn#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLAW<y><c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlaw");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLSD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlsd");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '0', '0', '0', 'Rd#4', 'Ra#4', 'Rm#4', '0', '1', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLSD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smlsd");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', 'Rn#4', 'RdLo#4', 'RdHi#4', '1', '1', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMLSLD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlsld");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '1', '0', '0', 'RdHi#4', 'RdLo#4', 'Rm#4', '0', '1', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMLSLD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smlsld");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '1', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', 'R#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMMLA{R}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smmla");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '1', '0', '1', 'Rd#4', 'Ra#4', 'Rm#4', '0', '0', 'R#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMMLA{R}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smmla");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', 'R#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMMLS{R}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smml");
      insn.mnem.add_suffix("s");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '1', '0', '1', 'Rd#4', 'Ra#4', 'Rm#4', '1', '1', 'R#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMMLS{R}<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("smml");
      insn.mnem.add_suffix("s");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', 'R#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMMUL{R}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smmul");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '1', '0', '1', 'Rd#4', '1', '1', '1', '1', 'Rm#4', '0', '0', 'R#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMMUL{R}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smmul");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMUAD{X}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smuad");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '0', '0', '0', 'Rd#4', '1', '1', '1', '1', 'Rm#4', '0', '0', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMUAD{X}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smuad");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', 'N#1', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMUL<x><y><c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smul");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '1', '1', '0', 'Rd#4', 'SBZ#4', 'Rm#4', '1', 'M#1', 'N#1', '0', 'Rn#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMUL<x><y><c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smul");
      if (field("N"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMULL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smull");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '1', '0', 'S#1', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMULL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smull");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMULW<y><c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smulw");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '0', 'Rd#4', 'SBZ#4', 'Rm#4', '1', 'M#1', '1', '0', 'Rn#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMULW<y><c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smulw");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', 'M#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SMUSD{X}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smusd");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '0', '0', '0', '0', 'Rd#4', '1', '1', '1', '1', 'Rm#4', '0', '1', 'M#1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SMUSD{X}<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("smusd");
      if (field("M"))
        insn.mnem.add_suffix("X");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '0', '0', 'sh#1', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'sat_imm#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SSAT<c> <Rd>, #<imm>, <Rn>{,<shift>}'
    decoder: |

      insn.mnem.set("ssat");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));
      not_implemented("operand: <Rn>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', 'sat_imm#5', 'Rd#4', 'imm#5', 'sh#1', '0', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SSAT<c> <Rd>, #<imm>, <Rn>{,<shift>}'
    decoder: |

      insn.mnem.set("ssat");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));
      not_implemented("operand: <Rn>{,<shift>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '0', '0', '1', '0', 'Rn#4', '0', '0', '0', '0', 'Rd#4', '0', '0', '(0)', '(0)', 'sat_imm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SSAT16<c> <Rd>, #<imm>, <Rn>'
    decoder: |

      insn.mnem.set("ssat16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '0', 'sat_imm#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SSAT16<c> <Rd>, #<imm>, <Rn>'
    decoder: |

      insn.mnem.set("ssat16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(int(32, field("i")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '0', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("ssub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['support_it_block']
    format: 'STC{L}<c> <coproc>, <CRd>, [<Rn>, #+/-<imm>]{!}'
    decoder: |

      insn.mnem.set("stc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'STC{L}<c> <coproc>, <CRd>, [<Rn>],<option>'
    decoder: |

      insn.mnem.set("stc");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [<Rn>],<option>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: ['support_it_block']
    format: 'STC2{L}<c> <coproc>, <CRd>, [<Rn>, #+/-<imm>]{!}'
    decoder: |

      insn.mnem.set("stc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(32, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'CRd#4', 'coproc#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: ['support_it_block', 'support_it_block']
    format: 'STC2{L}<c> <coproc>, <CRd>, [<Rn>],<option>'
    decoder: |

      insn.mnem.set("stc2");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: <coproc>");
      not_implemented("operand: <CRd>");
      not_implemented("operand: [<Rn>],<option>");


    semantic: []

  - encoding: ['1', '1', '0', '0', '0', 'Rn#3', 'register_list#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STM<c> <Rn>!,<registers>'
    decoder: |

      insn.mnem.set("stm");
      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>!,<registers>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '0', 'W#1', '0', 'Rn#4', '(0)', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STM<c>.W <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stm");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '0', '1', '0', 'W#1', '0', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STM<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stm");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '0', '0', '0', 'W#1', '0', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STMDA<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stmda");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '1', '0', '0', 'W#1', '0', 'Rn#4', '(0)', 'M#1', '(0)', 'register_list#13']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STMDB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stmdb");
      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '1', '0', '0', 'W#1', '0', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STMDB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stmdb");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['cond#4', '1', '0', '0', '1', '1', '0', 'W#1', '0', 'Rn#4', 'register_list#16']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STMIB<c> <Rn>{!}, <registers>'
    decoder: |

      insn.mnem.set("stmib");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: <registers>");


    semantic: []

  - encoding: ['0', '1', '1', '0', '0', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *str

  - encoding: ['1', '0', '0', '1', '0', 'Rt#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STR<c> <Rt>, [SP, #<imm>]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [SP");
      not_implemented("operand: #<imm>]");


    semantic: *str

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: []
    format: 'STR<c>.W <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *str

  - encoding: ['cond#4', '0', '1', '0', 'P#1', 'U#1', '0', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("str");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *str

  - encoding: ['0', '1', '0', '1', '0', '0', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *str

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STR<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', 'P#1', 'U#1', '0', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("str");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: *str

  - encoding: ['0', '1', '1', '1', '0', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRB<c> <Rt>, [<Rn>, #<imm5>]'
    decoder: |

      insn.mnem.set("strb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<imm5>]");


    semantic: *strb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STRB<c>.W <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("strb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: []
    format: 'STRB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("strb");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *strb

  - encoding: ['cond#4', '0', '1', '0', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRB<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("strb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *strb

  - encoding: ['0', '1', '0', '1', '0', '1', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRB<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("strb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *strb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STRB<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("strb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRB<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("strb");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: *strb

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRBT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("strbt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '0', '0', 'U#1', '1', '1', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRBT<c> <Rt>, [<Rn>], #<imm>'
    decoder: |

      insn.mnem.set("strbt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', 'U#1', '1', '1', '0', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: []
    format: 'STRBT<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("strbt");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'Rt2#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRD<c> <Rt>, <Rt2>, [<Rn>, #+/-<imm>]!'
    decoder: |

      insn.mnem.set("strd");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      var(32, "off");
      off = imm(32, field('imm8'))
      off <<= 2;
      if (field("U"))
        insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>"))) + off));
      else
        insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>"))) + off));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '1', '1', '1', 'imm_l#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRD<c> <Rt>, <Rt2>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("strd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '0', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv5TE*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRD<c> <Rt>, <Rt2>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("strd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', 'Rn#4', 'Rt#4', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STREX<c> <Rd>, <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("strex");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '0', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rt#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STREX<c> <Rd>, <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("strex");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '0', 'Rd#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'STREXB<c> <Rd>, <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '0', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rt#4']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STREXB<c> <Rd>, <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(8, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', 'Rn#4', 'Rt#4', 'Rt2#4', '0', '1', '1', '1', 'Rd#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '0', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rt#4']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(64, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', 'Rn#4', 'Rt#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rd#4']
    processor: ['ARMv7']
    mode: T1
    attribute: []
    format: 'STREXH<c> <Rd>, <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '1', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rt#4']
    processor: ['ARMv6K', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STREXH<c> <Rd>, <Rt>, [<Rn>]'
    decoder: |

      insn.mnem.set("strexh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '0', '0', '0', '0', 'imm#5', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: *strh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STRH<c>.W <Rt>, [<Rn>{, #<disp>}]'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{");
      not_implemented("operand: #<disp>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', 'Rn#4', 'Rt#4', '1', 'P#1', 'U#1', 'W#1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *strh

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '1', 'W#1', '0', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '0', '1', '1', 'imm_l#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>, #<disp>]!'
    decoder: |

      insn.mnem.set("strh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: *strh

  - encoding: ['0', '1', '0', '1', '0', '0', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>, <Rm>]'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16,
        reg(arm.Register("<Rn>", field("<Rn>"))) +
        reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *strh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', 'Rn#4', 'Rt#4', '0', '0', '0', '0', '0', '0', 'imm#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'STRH<c>.W <Rt>, [<Rn>, <Rm>{,LSL #<imm>}]'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Rm>{,LSL");
      not_implemented("operand: #<imm>}]");


    semantic: *strh

  - encoding: ['cond#4', '0', '0', '0', 'P#1', 'U#1', '0', 'W#1', '0', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>],+/-<Rm>'
    decoder: |

      insn.mnem.set("strh");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(16, reg(arm.Register("<Rn>", field("<Rn>")))));
      if (field("U"))
        insn.add_oprd(reg(arm.Register("<Rm>", field("<Rm>"))));
      else
        insn.add_oprd(-reg(arm.Register("<Rm>", field("<Rm>"))));


    semantic: *strh

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRHT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("strht");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '1', '1', '0', 'Rn#4', 'Rt#4', 'imm_h#4', '1', '0', '1', '1', 'imm_l#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRHT<c> <Rt>, [<Rn>] {,#<disp>}'
    decoder: |

      insn.mnem.set("strht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {,#<disp>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', 'U#1', '0', '1', '0', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A2
    attribute: []
    format: 'STRHT<c> <Rt>, [<Rn>], +/-<Rm>'
    decoder: |

      insn.mnem.set("strht");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: +/-<Rm>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', 'Rn#4', 'Rt#4', '1', '1', '1', '0', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'STRT<c> <Rt>, [<Rn>, #<disp>]'
    decoder: |

      insn.mnem.set("strt");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: #<disp>]");


    semantic: []

  - encoding: ['cond#4', '0', '1', '0', '0', 'U#1', '0', '1', '0', 'Rn#4', 'Rt#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'STRT<c> <Rt>, [<Rn>] {, #<imm>}'
    decoder: |

      insn.mnem.set("strt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));
      not_implemented("operand: {");
      not_implemented("operand: #<imm>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', 'U#1', '0', '1', '0', 'Rn#4', 'Rt#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A2
    attribute: []
    format: 'STRT<c> <Rt>, [<Rn>,+/-<Rm>{,<shift>}]{!}'
    decoder: |

      insn.mnem.set("strt");
      insn.set_cond(arm.Condition(field("cond")));
      if (field("W"))
        insn.add_attr("write-back");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>,+/-<Rm>{,<shift>}]");


    semantic: []

  - encoding: ['0', '0', '0', '1', '1', '1', '1', 'imm#3', 'Rn#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SUBS <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("sub");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['0', '0', '1', '1', '1', 'Rdn#3', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SUBS <Rdn>, #<imm>'
    decoder: |

      insn.mnem.set("sub");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rdn", field("Rdn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '1', '0', '1', 'S#1', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c>.W <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '1', '0', '1', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T4
    attribute: [ 'could_jmp' ]
    format: 'SUBW<c> <Rd>, <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("subw");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, <Rn>, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['0', '0', '0', '1', '1', '0', '1', 'Rm#3', 'Rn#3', 'Rd#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SUBS <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("sub");
      insn.mnem.add_suffix("s");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', 'S#1', 'Rn#4', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c>.W <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '0', 'S#1', 'Rn#4', 'Rd#4', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '0', '0', '0', '1', 'imm#7']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SUB<c> SP, SP, #<imm>'
    decoder: |

      insn.mnem.set("sub");
      insn.add_attr("support-it-block");
      not_implemented("operand: SP");
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '1', '1', '0', '1', 'S#1', '1', '1', '0', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c>.W <Rd>, SP, #<imm>'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', 'imm#3', 'Rd#4', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T3
    attribute: [ 'could_jmp' ]
    format: 'SUBW<c> <Rd>, SP, #<imm>'
    decoder: |

      insn.mnem.set("subw");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '0', '0', '1', '0', 'S#1', '1', '1', '0', '1', 'Rd#4', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, SP, #<arm_expand_imm>'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      insn.add_oprd(int(32, arm.ExpandImm(field("i"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', 'S#1', '1', '1', '0', '1', '(0)', 'imm#3', 'Rd#4', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, SP, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '0', 'S#1', '1', '1', '0', '1', 'Rd#4', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SUB{S}<c> <Rd>, SP, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("sub");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: SP");
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['1', '1', '0', '1', '1', '1', '1', '1', 'imm#8']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: ['syscall']
    format: 'SVC<c> #<imm>'
    decoder: |

      insn.mnem.set("svc");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '1', 'imm#24']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: ['syscall']
    format: 'SVC<c> #<imm>'
    decoder: |

      insn.mnem.set("svc");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', 'B#1', '0', '0', 'Rn#4', 'Rt#4', '(0)', '(0)', '(0)', '(0)', '1', '0', '0', '1', 'Rt2#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SWP{B}<c> <Rt>, <Rt2>, [<Rn>]'
    decoder: |

      insn.mnem.set("swp");
      if (field("B"))
        insn.mnem.add_suffix("B");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(mem(32, arm.Register("<Rn>", field("<Rn>"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTAB<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtab");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '0', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTAB<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtab");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTAB16<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtab16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '0', '0', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTAB16<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtab16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTAH<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtah");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '1', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTAH<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtah");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '0', '1', '0', '0', '1', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTB<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("sxtb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SXTB<c>.W <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTB<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTB16<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtb16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTB16<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxtb16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '0', '1', '0', '0', '0', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'SXTH<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("sxth");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'SXTH<c>.W <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxth");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'SXTH<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("sxth");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', 'Rn#4', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', 'H#1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: ['jmp']
    format: 'TBH<c> [<Rn>, <Rm>,LSL #1]'
    decoder: |

      insn.mnem.set("tbh");
      insn.add_attr("support-it-block");
      not_implemented("operand: <Rm>,LSL");
      not_implemented("operand: #1]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '1', '0', '0', '1', 'Rn#4', '0', 'imm#3', '1', '1', '1', '1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'TEQ<c> <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("teq");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TEQ<c> <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("teq");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '(0)', 'imm#3', '1', '1', '1', '1', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'TEQ<c> <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("teq");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TEQ<c> <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("teq");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '1', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TEQ<c> <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("teq");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', 'imm#1', '0', '0', '0', '0', '0', '1', 'Rn#4', '0', 'imm#3', '1', '1', '1', '1', 'imm#8']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'TST<c> <Rn>, #<imm>'
    decoder: |

      insn.mnem.set("tst");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#12']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TST<c> <Rn>, #<arm_expand_imm_c>'
    decoder: |

      insn.mnem.set("tst");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<arm_expand_imm_c>");


    semantic: []

  - encoding: ['0', '1', '0', '0', '0', '0', '1', '0', '0', '0', 'Rm#3', 'Rn#3']
    processor: ['ARMv4T', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: T1
    attribute: []
    format: 'TST<c> <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("tst");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '0', '1', 'Rn#4', '(0)', 'imm#3', '1', '1', '1', '1', 'imm#2', 'type#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: []
    format: 'TST<c>.W <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("tst");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'imm#5', 'type#2', '0', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TST<c> <Rn>, <Rm>{,<shift>}'
    decoder: |

      insn.mnem.set("tst");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '1', '0', '0', '0', '1', 'Rn#4', '(0)', '(0)', '(0)', '(0)', 'Rs#4', '0', 'type#2', '1', 'Rm#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'TST<c> <Rn>, <Rm>, <type> <Rs>'
    decoder: |

      insn.mnem.set("tst");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: <type>");
      insn.add_oprd(reg(arm.Register("Rs", field("Rs"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: []
    format: 'UADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'UADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '1', '1', '0', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'widthm1#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UBFX<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("ubfx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '1', '1', 'widthm1#5', 'Rd#4', 'lsb#5', '1', '0', '1', 'Rn#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UBFX<c> <Rd>, <Rn>, #<lsb>, #<width>'
    decoder: |

      insn.mnem.set("ubfx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: #<lsb>");
      not_implemented("operand: #<width>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', 'Rn#4', '(1)', '(1)', '(1)', '(1)', 'Rd#4', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv7-R']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UDIV<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("udiv");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UHSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UHSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uhsub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '0', '1', '1', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UMAAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umaal");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '0', '1', '0', '0', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UMAAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umaal");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UMLAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umlal");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '1', 'S#1', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UMLAL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umlal");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '0', 'Rn#4', 'RdLo#4', 'RdHi#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UMULL<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umull");
      insn.add_attr("support-it-block");
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '0', '0', '0', '1', '0', '0', 'S#1', 'RdHi#4', 'RdLo#4', 'Rm#4', '1', '0', '0', '1', 'Rn#4']
    processor: ['ARMv4*', 'ARMv5T*', 'ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UMULL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("umull");
      if field("S")
        insn.mnem.add_suffix("s")
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <RdLo>");
      not_implemented("operand: <RdHi>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqadd16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQADD16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqadd16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqadd8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '0', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQADD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqadd8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqasx");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQASX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqasx");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQSAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQSUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UQSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '1', '0', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UQSUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("uqsub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USAD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usad8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '0', '0', '0', 'Rd#4', '1', '1', '1', '1', 'Rm#4', '0', '0', '0', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USAD8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usad8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', 'Rn#4', 'Ra#4', 'Rd#4', '0', '0', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USADA8<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("usada8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '1', '1', '0', '0', '0', 'Rd#4', 'Ra#4', 'Rm#4', '0', '0', '0', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USADA8<c> <Rd>, <Rn>, <Rm>, <Ra>'
    decoder: |

      insn.mnem.set("usada8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      insn.add_oprd(reg(arm.Register("Ra", field("Ra"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '1', '0', 'sh#1', '0', 'Rn#4', '0', 'imm#3', 'Rd#4', 'imm#2', '(0)', 'sat_imm#5']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USAT<c> <Rd>, #<imm5>, <Rn>{,<shift>}'
    decoder: |

      insn.mnem.set("usat");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<imm5>");
      not_implemented("operand: <Rn>{,<shift>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', 'sat_imm#5', 'Rd#4', 'imm#5', 'sh#1', '0', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USAT<c> <Rd>, #<imm5>, <Rn>{,<shift>}'
    decoder: |

      insn.mnem.set("usat");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<imm5>");
      not_implemented("operand: <Rn>{,<shift>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '(0)', '1', '1', '1', '0', '1', '0', 'Rn#4', '0', '0', '0', '0', 'Rd#4', '0', '0', '(0)', '(0)', 'sat_imm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USAT16<c> <Rd>, #<imm4>, <Rn>'
    decoder: |

      insn.mnem.set("usat16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<imm4>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '0', 'sat_imm#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '0', '1', '1', 'Rn#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USAT16<c> <Rd>, #<imm4>, <Rn>'
    decoder: |

      insn.mnem.set("usat16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: #<imm4>");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usax");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '0', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USAX<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usax");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usub16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USUB16<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usub16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '0', '1', '0', '0', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'USUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usub8");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '0', '1', '0', '1', 'Rn#4', 'Rd#4', '(1)', '(1)', '(1)', '(1)', '1', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'USUB8<c> <Rd>, <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("usub8");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTAB<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtab");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '0', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UXTAB<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtab");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTAB16<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtab16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '0', '0', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UXTAB16<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtab16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', 'Rn#4', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTAH<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtah");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '1', 'Rn#4', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: []
    format: 'UXTAH<c> <Rd>, <Rn>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtah");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '0', '1', '0', '1', '1', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTB<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("uxtb");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'UXTB<c>.W <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtb");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UXTB<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtb");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTB16<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtb16");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UXTB16<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxtb16");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '0', '1', '1', '0', '0', '1', '0', '1', '0', 'Rm#3', 'Rd#3']
    processor: ['ARMv6*', 'ARMv7']
    mode: T1
    attribute: [ 'could_jmp' ]
    format: 'UXTH<c> <Rd>, <Rm>'
    decoder: |

      insn.mnem.set("uxth");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', '1', '(0)', 'rotate#2', 'Rm#4']
    processor: ['ARMv6T2', 'ARMv7']
    mode: T2
    attribute: [ 'could_jmp' ]
    format: 'UXTH<c>.W <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxth");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['cond#4', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', 'Rd#4', 'rotate#2', '(0)', '(0)', '0', '1', '1', '1', 'Rm#4']
    processor: ['ARMv6*', 'ARMv7']
    mode: A1
    attribute: [ 'could_jmp' ]
    format: 'UXTH<c> <Rd>, <Rm>{,<rotation>}'
    decoder: |

      insn.mnem.set("uxth");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rd", field("Rd"))));
      not_implemented("operand: <Rm>{,<rotation>}");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VABA<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vaba");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VABA<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vaba");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VABAL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabal");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VABAL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabal");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VABD<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vabd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VABD<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VABDL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabdl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VABDL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabdl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VABD<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vabd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VABD<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vabd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VABS<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vab");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VABS<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vab");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VABS<c>.F64 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vab");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VABS<c>.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vab");
      insn.mnem.add_suffix("s");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VADD<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VADD<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VADD<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VADD<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VADD<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VADD<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vadd");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VADDHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vaddhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VADDHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vaddhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', 'op#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VADDL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vaddl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', 'op#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VADDW<c>.<dt> <Qd>, <Qn>, <Dm>'
    decoder: |

      insn.mnem.set("vaddw");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VAND<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vand");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VAND<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vand");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'imm#1', '1', '1', '1', '1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', '1', '1', 'imm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VBIC<c>.<dt> <Qd>, #<imm>'
    decoder: |

      insn.mnem.set("vbic");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'imm#1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', '1', '1', 'imm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VBIC<c>.<dt> <Dd>, #<imm>'
    decoder: |

      insn.mnem.set("vbic");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '0', '1', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VBIC<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vbic");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '0', '1', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VBIC<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vbic");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'op#2', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'op#2', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCEQ<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCEQ<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VCEQ<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VCEQ<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCEQ<c>.<dt> <Qd>, <Qm>, #0'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCEQ<c>.<dt> <Dd>, <Dm>, #0'
    decoder: |

      insn.mnem.set("vceq");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCGE<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCGE<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VCGE<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VCGE<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCGE<c>.<dt> <Qd>, <Qm>, #0'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCGE<c>.<dt> <Dd>, <Dm>, #0'
    decoder: |

      insn.mnem.set("vcge");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCGT<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCGT<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VCGT<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VCGT<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCGT<c>.<dt> <Qd>, <Qm>, #0'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCGT<c>.<dt> <Dd>, <Dm>, #0'
    decoder: |

      insn.mnem.set("vcgt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCLE<c>.<dt> <Qd>, <Qm>, #0'
    decoder: |

      insn.mnem.set("vcle");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCLE<c>.<dt> <Dd>, <Dm>, #0'
    decoder: |

      insn.mnem.set("vcle");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCLS<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vcl");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCLS<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vcl");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCLT<c>.<dt> <Qd>, <Qm>, #0'
    decoder: |

      insn.mnem.set("vclt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCLT<c>.<dt> <Dd>, <Dm>, #0'
    decoder: |

      insn.mnem.set("vclt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCLZ<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vclz");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCLZ<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vclz");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', 'E#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCMP{E}<c>.F64 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vcmp");
      if (field("E"))
        insn.mnem.add_suffix("E");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', 'E#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCMP{E}<c>.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vcmp");
      if (field("E"))
        insn.mnem.add_suffix("E");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', 'E#1', '1', '(0)', '0', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VCMP{E}<c>.F64 <Dd>, #0.0'
    decoder: |

      insn.mnem.set("vcmp");
      if (field("E"))
        insn.mnem.add_suffix("E");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: #0.0");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', 'E#1', '1', '(0)', '0', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VCMP{E}<c>.F32 <Sd>, #0.0'
    decoder: |

      insn.mnem.set("vcmp");
      if (field("E"))
        insn.mnem.add_suffix("E");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      not_implemented("operand: #0.0");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCNT<c>.8 <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vcnt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCNT<c>.8 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vcnt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '1', 'op#2', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<c>.<Td>.<Tm> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("op") == 0b10)
        insn.mnem.add_suffix(".S32.F32");
      if (field("op") == 0b11)
        insn.mnem.add_suffix(".U32.F32");
      if (field("op") == 0b00)
        insn.mnem.add_suffix(".F32.S32");
      if (field("op") == 0b01)
        insn.mnem.add_suffix(".F32.U32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '1', 'op#2', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCVT<c>.<Td>.<Tm> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("op") == 0b10)
        insn.mnem.add_suffix(".S32.F32");
      if (field("op") == 0b11)
        insn.mnem.add_suffix(".U32.F32");
      if (field("op") == 0b00)
        insn.mnem.add_suffix(".F32.S32");
      if (field("op") == 0b01)
        insn.mnem.add_suffix(".F32.U32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '1', 'opc2#3', 'Vd#4', '1', '0', '1', 'sz#1', 'op#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT{R}<c>.S32.F64 <Sd>, <Dm>'
    decoder: |

      insn.mnem.set("vcvt");
      if (field("R"))
        insn.mnem.add_suffix("R");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".S32.F64");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '1', 'opc2#3', 'Vd#4', '1', '0', '1', 'sz#1', 'op#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block', 'support_it_block', 'support_it_block', 'support_it_block']
    format: 'VCVT<c>.F32.<Tm> <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.mnem.add_suffix(".");
      if (field("op"))
        insn.mnem.add_suffix("S");
      else
        insn.mnem.add_suffix("U");
      insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '1', '1', 'op#1', '0', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<c>.<Td>.<Tm> <Qd>, <Qm>, #<fbits>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("op") == 0b10)
        insn.mnem.add_suffix(".S32.F32");
      if (field("op") == 0b11)
        insn.mnem.add_suffix(".U32.F32");
      if (field("op") == 0b00)
        insn.mnem.add_suffix(".F32.S32");
      if (field("op") == 0b01)
        insn.mnem.add_suffix(".F32.U32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      not_implemented("operand: #<fbits>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '1', '1', 'op#1', '0', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCVT<c>.<Td>.<Tm> <Dd>, <Dm>, #<fbits>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("op") == 0b10)
        insn.mnem.add_suffix(".S32.F32");
      if (field("op") == 0b11)
        insn.mnem.add_suffix(".U32.F32");
      if (field("op") == 0b00)
        insn.mnem.add_suffix(".F32.S32");
      if (field("op") == 0b01)
        insn.mnem.add_suffix(".F32.U32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      not_implemented("operand: #<fbits>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '1', 'op#1', '1', 'U#1', 'Vd#4', '1', '0', '1', 'sf#1', 'sx#1', '1', 'imm#1', '0', 'imm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<c>.<Td>.F64 <Dd>, <Dd>, #<fbits>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("sx"))
        insn.mnem.add_suffix("32");
      else
        insn.mnem.add_suffix("16");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: #<fbits>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '1', 'op#1', '1', 'U#1', 'Vd#4', '1', '0', '1', 'sf#1', 'sx#1', '1', 'imm#1', '0', 'imm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VCVT<c>.F32.<Td> <Sd>, <Sd>, #<fbits>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("sx"))
        insn.mnem.add_suffix("32");
      else
        insn.mnem.add_suffix("16");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      not_implemented("operand: #<fbits>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '1', '1', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<c>.F64.F32 <Dd>, <Sm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '1', '1', '1', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCVT<c>.F32.F64 <Sd>, <Dm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '1', '1', 'op#1', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<c>.F32.F16 <Qd>, <Dm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.mnem.add_suffix(".F16");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '1', '1', 'op#1', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCVT<c>.F16.F32 <Dd>, <Qm>'
    decoder: |

      insn.mnem.set("vcvt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F16");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '1', 'op#1', 'Vd#4', '1', '0', '1', '0', 'T#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VCVT<y><c>.F32.F16 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vcvt");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.mnem.add_suffix(".F16");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '1', 'op#1', 'Vd#4', '1', '0', '1', '0', 'T#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VCVT<y><c>.F16.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vcvt");
      if (field("M"))
        insn.mnem.add_suffix("t");
      else
        insn.mnem.add_suffix("b");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F16");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VDIV<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vdiv");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VDIV<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vdiv");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'imm#4', 'Vd#4', '1', '1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VDUP<c>.<size> <Qd>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vdup");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'imm#4', 'Vd#4', '1', '1', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VDUP<c>.<size> <Dd>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vdup");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'b_size#1', 'Q#1', '0', 'Vd#4', 'Rt#4', '1', '0', '1', '1', 'D#1', '0', 'e_size#1', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VDUP<c>.<size>'
    decoder: |

      insn.mnem.set("vdup");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'b_size#1', 'Q#1', '0', 'Vd#4', 'Rt#4', '1', '0', '1', '1', 'D#1', '0', 'e_size#1', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VDUP<c>.<size>'
    decoder: |

      insn.mnem.set("vdup");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VEOR<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("veor");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VEOR<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("veor");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'Vn#4', 'Vd#4', 'imm#4', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VEXT<c>.8 <Qd>, <Qn>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vext");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', '1', '1', 'Vn#4', 'Vd#4', 'imm#4', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VEXT<c>.8 <Dd>, <Dn>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vext");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', 'op#1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VH<op><c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vh");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', 'op#1', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VH<op><c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vh");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', 'D#1', '1', '0', 'Rn#4', 'Vd#4', 'type#4', 'size#2', 'align#2', 'Rm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}]{!}'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', '0', 'D#1', '1', '0', 'Rn#4', 'Vd#4', 'type#4', 'size#2', 'align#2', 'Rm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}], <Rm>'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', 'D#1', '1', '0', 'Rn#4', 'Vd#4', 'size#2', '0', '0', 'index_align#4', 'Rm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}]{!}'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', '1', 'D#1', '1', '0', 'Rn#4', 'Vd#4', 'size#2', '0', '0', 'index_align#4', 'Rm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}], <Rm>'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', 'D#1', '1', '0', 'Rn#4', 'Vd#4', '1', '1', '0', '0', 'size#2', 'T#1', 'a#1', 'Rm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}]{!}'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', '1', 'D#1', '1', '0', 'Rn#4', 'Vd#4', '1', '1', '0', '0', 'size#2', 'T#1', 'a#1', 'Rm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VLD1<c>.<size> <list>, [<Rn>{@<align>}], <Rm>'
    decoder: |

      insn.mnem.set("vld1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VLDM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vldm");
      not_implemented("field: {mode}");

      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: []
    format: 'VLDM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vldm");
      not_implemented("field: {mode}");

      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VLDM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vldm");
      not_implemented("field: {mode}");

      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'FLDMX'
    decoder: |

      insn.mnem.set("fldmx");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', 'U#1', 'D#1', '0', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VLDR<c> <Dd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', 'U#1', 'D#1', '0', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'VLDR<c> <Dd>, [PC,#-0]'
    decoder: |

      insn.mnem.set("vldr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(mem(32, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', 'U#1', 'D#1', '0', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VLDR<c> <Sd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', 'U#1', 'D#1', '0', '1', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block']
    format: 'VLDR<c> <Sd>, [PC,#-0]'
    decoder: |

      insn.mnem.set("vldr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(mem(32, reg("pc")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', 'Q#1', 'M#1', 'op#1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', 'Q#1', 'M#1', 'op#1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'op#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'op#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', 'op#1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'V<op>L<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', 'op#1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'V<op>L<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'V<op><c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '0', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'V<op><c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'Q#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '0', 'F#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Qd>, <Qn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'Q#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '0', 'F#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'V<op><c>.<dt> <Dd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '1', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'V<op>L<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '1', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'V<op>L<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', 'imm#1', '1', '1', '1', '1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', 'op#1', '1', 'imm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c>.<dt> <Qd>, #<imm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'imm#1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', 'op#1', '1', 'imm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMOV<c>.<dt> <Dd>, #<imm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', 'imm_h#4', 'Vd#4', '1', '0', '1', 'sz#1', '(0)', '0', '(0)', '0', 'imm_l#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VMOV<c>.F64 <Dd>, #<imm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', 'imm_h#4', 'Vd#4', '1', '0', '1', 'sz#1', '(0)', '0', '(0)', '0', 'imm_l#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block']
    format: 'VMOV<c>.F32 <Sd>, #<imm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', '0', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VMOV<c>.F64 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '0', 'Vd#4', '1', '0', '1', 'sz#1', '0', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VMOV<c>.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'opc1#2', '0', 'Vd#4', 'Rt#4', '1', '0', '1', '1', 'D#1', 'opc2#2', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c>.<size> <Dd[x]>, <Rt>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <Dd[x]>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'opc1#2', '0', 'Vd#4', 'Rt#4', '1', '0', '1', '1', 'D#1', 'opc2#2', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: []
    format: 'VMOV<c>.<size> <Dd[x]>, <Rt>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <Dd[x]>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', 'U#1', 'opc1#2', '1', 'Vn#4', 'Rt#4', '1', '0', '1', '1', 'N#1', 'opc2#2', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c>.<dt> <Rt>, <Dn[x]>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Dn[x]>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', 'U#1', 'opc1#2', '1', 'Vn#4', 'Rt#4', '1', '0', '1', '1', 'N#1', 'opc2#2', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: []
    format: 'VMOV<c>.<dt> <Rt>, <Dn[x]>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: <Dn[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0', 'op#1', 'Vn#4', 'Rt#4', '1', '0', '1', '0', 'N#1', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Sn>, <Rt>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', '0', '0', 'op#1', 'Vn#4', 'Rt#4', '1', '0', '1', '0', 'N#1', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Rt>, <Sn>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '0', 'op#1', 'Rt2#4', 'Rt#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Sm>, <Sm1>, <Rt>, <Rt2>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));
      not_implemented("operand: <Sm1>");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '0', '1', '0', 'op#1', 'Rt2#4', 'Rt#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Rt>, <Rt2>, <Sm>, <Sm1>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));
      not_implemented("operand: <Sm1>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '0', 'op#1', 'Rt2#4', 'Rt#4', '1', '0', '1', '1', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Dm>, <Rt>, <Rt2>'
    decoder: |

      insn.mnem.set("vmov");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '0', '1', '0', 'op#1', 'Rt2#4', 'Rt#4', '1', '0', '1', '1', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMOV<c> <Rt>, <Rt2>, <Dm>'
    decoder: |

      insn.mnem.set("vmov");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rt2", field("Rt2"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#3', '0', '0', '0', 'Vd#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOVL<c>.<dt> <Qd>, <Dm>'
    decoder: |

      insn.mnem.set("vmovl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#3', '0', '0', '0', 'Vd#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VMOVL<c>.<dt> <Qd>, <Dm>'
    decoder: |

      insn.mnem.set("vmovl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '0', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMOVN<c>.<dt> <Dd>, <Qm>'
    decoder: |

      insn.mnem.set("vmovn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '0', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VMOVN<c>.<dt> <Dd>, <Qm>'
    decoder: |

      insn.mnem.set("vmovn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', 'Rt#4', '1', '0', '1', '0', '0', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMRS<c> <Rt>, FPSCR'
    decoder: |

      insn.mnem.set("vmr");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: FPSCR");


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', 'Rt#4', '1', '0', '1', '0', '0', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: []
    format: 'VMRS<c> <Rt>, FPSCR'
    decoder: |

      insn.mnem.set("vmr");
      insn.mnem.add_suffix("s");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: FPSCR");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0', '1', 'Rt#4', '1', '0', '1', '0', '0', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMSR<c> FPSCR, <Rt>'
    decoder: |

      insn.mnem.set("vmsr");
      insn.add_attr("support-it-block");
      not_implemented("operand: FPSCR");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0', '1', 'Rt#4', '1', '0', '1', '0', '0', '(0)', '(0)', '1', '(0)', '(0)', '(0)', '(0)']
    processor: []
    mode: A1
    attribute: []
    format: 'VMSR<c> FPSCR, <Rt>'
    decoder: |

      insn.mnem.set("vmsr");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: FPSCR");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));


    semantic: []

  - encoding: ['1', '1', '1', 'op#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMUL<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'op#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMUL<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', 'op#1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VMULL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', 'op#1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VMULL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMUL<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMUL<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VMUL<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VMUL<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vmul");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'Q#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', 'F#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMUL<c>.<dt> <Qd>, <Qn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'Q#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', 'F#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMUL<c>.<dt> <Dd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VMULL<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VMULL<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VMVN<c> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vmvn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VMVN<c> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vmvn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VNEG<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vneg");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '1', 'Vd#4', '0', 'F#1', '1', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VNEG<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vneg");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', '0', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VNEG<c>.F64 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vneg");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', '0', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VNEG<c>.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vneg");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '0', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VNMLA<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vnmla");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '0', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VNMLS<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vnml");
      insn.mnem.add_suffix("s");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VNMUL<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vnmul");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VNMUL<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vnmul");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VORN<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vorn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VORN<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vorn");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'imm#1', '1', '1', '1', '1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', '0', '1', 'imm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VORR<c>.<dt> <Qd>, #<imm>'
    decoder: |

      insn.mnem.set("vorr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'imm#1', '1', 'D#1', '0', '0', '0', 'imm#3', 'Vd#4', 'cmode#4', '0', 'Q#1', '0', '1', 'imm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VORR<c>.<dt> <Dd>, #<imm>'
    decoder: |

      insn.mnem.set("vorr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VORR<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vorr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '1', '0', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VORR<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vorr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '0', 'op#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPADAL<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vpadal");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '0', 'op#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VPADAL<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vpadal");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPADD<c>.<dt>'
    decoder: |

      insn.mnem.set("vpadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VPADD<c>.<dt>'
    decoder: |

      insn.mnem.set("vpadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPADD<c>.F32'
    decoder: |

      insn.mnem.set("vpadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VPADD<c>.F32'
    decoder: |

      insn.mnem.set("vpadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '0', '1', '0', 'op#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPADDL<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vpaddl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '0', '1', '0', 'op#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VPADDL<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vpaddl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '0', 'N#1', 'Q#1', 'M#1', 'op#1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VP<op><c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vp");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '0', 'N#1', 'Q#1', 'M#1', 'op#1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VP<op><c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vp");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VP<op><c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vp");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'op#1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VP<op><c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vp");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '1', 'D#1', '1', '1', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPOP <list>'
    decoder: |

      insn.mnem.set("vpop");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '1', 'D#1', '1', '1', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: []
    format: 'VPOP <list>'
    decoder: |

      insn.mnem.set("vpop");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '0', '1', 'D#1', '1', '1', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VPOP <list>'
    decoder: |

      insn.mnem.set("vpop");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '0', '1', 'D#1', '1', '1', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'FLDMX'
    decoder: |

      insn.mnem.set("fldmx");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', '0', 'D#1', '1', '0', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VPUSH<c> <list>'
    decoder: |

      insn.mnem.set("vpush");
      insn.add_attr("support-it-block");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', '0', 'D#1', '1', '0', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: []
    format: 'VPUSH<c> <list>'
    decoder: |

      insn.mnem.set("vpush");
      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', '0', 'D#1', '1', '0', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VPUSH<c> <list>'
    decoder: |

      insn.mnem.set("vpush");
      insn.add_attr("support-it-block");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', '0', 'D#1', '1', '0', '1', '1', '0', '1', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'FSTMX'
    decoder: |

      insn.mnem.set("fstmx");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQABS<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vqab");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQABS<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vqab");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQADD<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vqadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQADD<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqadd");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', 'op#1', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQD<op><c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqd");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', 'op#1', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VQD<op><c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqd");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '1', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VQD<op><c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqd");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', 'op#1', '1', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VQD<op><c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqd");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQDMULH<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vqdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQDMULH<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'Q#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VQDMULH<c>.<dt> <Qd>, <Qn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'Q#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '0', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VQDMULH<c>.<dt> <Dd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQDMULL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqdmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VQDMULL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqdmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VQDMULL<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqdmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VQDMULL<c>.<dt> <Qd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqdmull");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '0', 'op2#2', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQMOV{op}N<c>.<type><size> <Dd>, <Qm>'
    decoder: |

      insn.mnem.set("vqmov");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '0', 'op2#2', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VQMOV{op}N<c>.<type><size> <Dd>, <Qm>'
    decoder: |

      insn.mnem.set("vqmov");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQNEG<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vqneg");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '1', '1', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQNEG<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vqneg");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQRDMULH<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vqrdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '1', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQRDMULH<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqrdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'Q#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VQRDMULH<c>.<dt> <Qd>, <Qn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqrdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'Q#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'VQRDMULH<c>.<dt> <Dd>, <Dn>, <Dm[x]>'
    decoder: |

      insn.mnem.set("vqrdmulh");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      not_implemented("operand: <Dm[x]>");


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQRSHL<c>.<type><size> <Qd>, <Qm>, <Qn>'
    decoder: |

      insn.mnem.set("vqrshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQRSHL<c>.<type><size> <Dd>, <Dm>, <Dn>'
    decoder: |

      insn.mnem.set("vqrshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', 'op#1', '0', '1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQRSHR{op}N<c>.<type><size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vqrshr");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', 'op#1', '0', '1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VQRSHR{op}N<c>.<type><size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vqrshr");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQSHL<c>.<type><size> <Qd>, <Qm>, <Qn>'
    decoder: |

      insn.mnem.set("vqshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQSHL<c>.<type><size> <Dd>, <Dm>, <Dn>'
    decoder: |

      insn.mnem.set("vqshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '1', 'op#1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQSHL{op}<c>.<type><size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vqshl");
      not_implemented("field {op}");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '1', 'op#1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQSHL{op}<c>.<type><size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vqshl");
      not_implemented("field {op}");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', 'op#1', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQSHR{op}N<c>.<type><size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vqshr");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', 'op#1', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VQSHR{op}N<c>.<type><size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vqshr");
      not_implemented("field {op}");
      insn.mnem.add_suffix("N");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VQSUB<c>.<type><size> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vqsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VQSUB<c>.<type><size> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vqsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRADDHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vraddhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VRADDHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vraddhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '0', 'F#1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRECPE<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vrecpe");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '0', 'F#1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRECPE<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vrecpe");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRECPS<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vrecp");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '0', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRECPS<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vrecp");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '0', '0', 'op2#2', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VREV<n><c>.<size> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vrev");
      not_implemented("field: <n>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '0', '0', 'Vd#4', '0', '0', '0', 'op2#2', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VREV<n><c>.<size> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vrev");
      not_implemented("field: <n>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRHADD<c> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vrhadd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRHADD<c> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vrhadd");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSHL<c>.<type><size> <Qd>, <Qm>, <Qn>'
    decoder: |

      insn.mnem.set("vrshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRSHL<c>.<type><size> <Dd>, <Dm>, <Dn>'
    decoder: |

      insn.mnem.set("vrshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '1', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSHR<c>.<type><size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vrshr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '1', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRSHR<c>.<type><size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vrshr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', '0', '0', '1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSHRN<c>.I<size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vrshrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', '0', '0', '1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VRSHRN<c>.I<size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vrshrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '0', 'F#1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSQRTE<c>.<dt> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vrsqrte");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '1', 'Vd#4', '0', '1', '0', 'F#1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRSQRTE<c>.<dt> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vrsqrte");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSQRTS<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vrsqrt");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '1', '1', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRSQRTS<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vrsqrt");
      insn.mnem.add_suffix("s");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '1', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSRA<c>.<type><size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vrsra");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '1', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VRSRA<c>.<type><size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vrsra");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VRSUBHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vrsubhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VRSUBHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vrsubhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSHL<c>.I<size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSHL<c>.I<size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSHL<c>.I<size> <Qd>, <Qm>, <Qn>'
    decoder: |

      insn.mnem.set("vshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSHL<c>.I<size> <Dd>, <Dm>, <Dn>'
    decoder: |

      insn.mnem.set("vshl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSHLL<c>.<type><size> <Qd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshll");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '1', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VSHLL<c>.<type><size> <Qd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshll");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '1', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VSHLL<c>.<type><size> <Qd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshll");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '1', '1', '0', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: []
    format: 'VSHLL<c>.<type><size> <Qd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshll");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '0', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSHR<c>.<type><size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vshr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '0', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSHR<c>.<type><size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vshr");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSHRN<c>.I<size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vshrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'imm#6', 'Vd#4', '1', '0', '0', '0', '0', '0', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VSHRN<c>.I<size> <Dd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vshrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".I");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSLI<c>.<size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vsli");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSLI<c>.<size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vsli");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSQRT<c>.F64 <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vsqrt");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '1', 'D#1', '1', '1', '0', '0', '0', '1', 'Vd#4', '1', '0', '1', 'sz#1', '1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VSQRT<c>.F32 <Sd>, <Sm>'
    decoder: |

      insn.mnem.set("vsqrt");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSRA<c>.<type><size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vsra");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '0', '0', '1', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSRA<c>.<type><size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vsra");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <type>");
      not_implemented("field: <size>");

      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSRI<c>.<size> <Qd>, <Qm>, #<imm>'
    decoder: |

      insn.mnem.set("vsri");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', 'imm#6', 'Vd#4', '0', '1', '0', '0', 'L#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSRI<c>.<size> <Dd>, <Dm>, #<imm>'
    decoder: |

      insn.mnem.set("vsri");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));
      insn.add_oprd(int(32, field("i")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '0', 'D#1', '0', '0', 'Rn#4', 'Vd#4', 'type#4', 'size#2', 'align#2', 'Rm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VST1<c>.<size> <list>, [<Rn>{@<align>}]{!}'
    decoder: |

      insn.mnem.set("vst1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', '0', 'D#1', '0', '0', 'Rn#4', 'Vd#4', 'type#4', 'size#2', 'align#2', 'Rm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block', 'support_it_block']
    format: 'VST1<c>.<size> <list>, [<Rn>{@<align>}], <Rm>'
    decoder: |

      insn.mnem.set("vst1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '0', '0', '1', '1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', 'size#2', '0', '0', 'index_align#4', 'Rm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VST1<c>.<size> <list>, [<Rn>{@<align>}]{!}'
    decoder: |

      insn.mnem.set("vst1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      if (field("W"))
        insn.add_attr("write-back");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '1', '0', '0', '1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', 'size#2', '0', '0', 'index_align#4', 'Rm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VST1<c>.<size> <list>, [<Rn>{@<align>}], <Rm>'
    decoder: |

      insn.mnem.set("vst1");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      not_implemented("operand: <list>");
      not_implemented("operand: [<Rn>{@<align>}]");
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSTM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vstm");
      not_implemented("field: {mode}");

      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: []
    format: 'VSTM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vstm");
      not_implemented("field: {mode}");

      insn.set_cond(arm.Condition(field("cond")));
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VSTM{mode}<c> <Rn>{!},  <list>'
    decoder: |

      insn.mnem.set("vstm");
      not_implemented("field: {mode}");

      insn.add_attr("support-it-block");
      not_implemented("operand: <Rn>{!}");
      not_implemented("operand: ");
      not_implemented("operand: <list>");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', 'P#1', 'U#1', 'D#1', 'W#1', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: ['support_it_block']
    format: 'FSTMX'
    decoder: |

      insn.mnem.set("fstmx");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', 'U#1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSTR<c> <Dd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vstr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', 'U#1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '1', 'imm#8']
    processor: []
    mode: A1
    attribute: []
    format: 'VSTR<c> <Dd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vstr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '0', '1', 'U#1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VSTR<c> <Sd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vstr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['cond#4', '1', '1', '0', '1', 'U#1', 'D#1', '0', '0', 'Rn#4', 'Vd#4', '1', '0', '1', '0', 'imm#8']
    processor: []
    mode: A2
    attribute: []
    format: 'VSTR<c> <Sd>, [<Rn>{,#+/-<imm>}]'
    decoder: |

      insn.mnem.set("vstr");
      insn.set_cond(arm.Condition(field("cond")));
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      not_implemented("operand: [<Rn>{,#+/-<imm>}]");


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSUB<c>.<dt> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSUB<c>.<dt> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSUB<c>.F32 <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', '1', 'sz#1', 'Vn#4', 'Vd#4', '1', '1', '0', '1', 'N#1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSUB<c>.F32 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '0', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T2
    attribute: ['support_it_block']
    format: 'VSUB<c>.F64 <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".F64");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['cond#4', '1', '1', '1', '0', '0', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', '1', 'sz#1', 'N#1', '1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A2
    attribute: ['support_it_block', 'support_it_block', 'support_it_block']
    format: 'VSUB<c>.F32 <Sd>, <Sn>, <Sm>'
    decoder: |

      insn.mnem.set("vsub");
      insn.set_cond(arm.Condition(field("cond")));
      insn.mnem.add_suffix(".F32");
      insn.add_oprd(reg(arm.Register("Sd", field("Sd"))));
      insn.add_oprd(reg(arm.Register("Sn", field("Sn"))));
      insn.add_oprd(reg(arm.Register("Sm", field("Sm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSUBHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vsubhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '1', '1', '0', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'VSUBHN<c>.<dt> <Dd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vsubhn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', 'U#1', '1', '1', '1', '1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', 'op#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSUBL<c>.<dt> <Qd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vsubl");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', 'U#1', '1', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '0', '0', '1', 'op#1', 'N#1', '0', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSUBW<c>.<dt> {<Qd>,} <Qn>, <Dm>'
    decoder: |

      insn.mnem.set("vsubw");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      if (field("U"))
        insn.mnem.add_suffix("U");
      else
        insn.mnem.add_suffix("S");
      if (field("size") == 0b00)
        insn.mnem.add_suffix("8");
      if (field("size") == 0b01)
        insn.mnem.add_suffix("16");
      if (field("size") == 0b10)
        insn.mnem.add_suffix("32");
      not_implemented("operand: {<Qd>,}");
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VSWP<c> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vswp");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '0', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VSWP<c> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vswp");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', 'len#2', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'V<op><c>.8 <Dd>, <list>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: <list>");
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'Vn#4', 'Vd#4', '1', '0', 'len#2', 'N#1', 'op#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: []
    format: 'V<op><c>.8 <Dd>, <list>, <Dm>'
    decoder: |

      insn.mnem.set("v");
      not_implemented("field <op>");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".8");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      not_implemented("operand: <list>");
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VTRN<c>.<size> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vtrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '0', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VTRN<c>.<size> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vtrn");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '0', '1', '1', '1', '1', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VTST<c>.<size> <Qd>, <Qn>, <Qm>'
    decoder: |

      insn.mnem.set("vtst");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qn", field("Qn"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '0', '0', 'D#1', 'size#2', 'Vn#4', 'Vd#4', '1', '0', '0', '0', 'N#1', 'Q#1', 'M#1', '1', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VTST<c>.<size> <Dd>, <Dn>, <Dm>'
    decoder: |

      insn.mnem.set("vtst");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dn", field("Dn"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VUZP<c>.<size> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vuzp");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '1', '0', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VUZP<c>.<size> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vuzp");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '1', '1', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: T1
    attribute: ['support_it_block']
    format: 'VZIP<c>.<size> <Qd>, <Qm>'
    decoder: |

      insn.mnem.set("vzip");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Qd", field("Qd"))));
      insn.add_oprd(reg(arm.Register("Qm", field("Qm"))));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', 'D#1', '1', '1', 'size#2', '1', '0', 'Vd#4', '0', '0', '0', '1', '1', 'Q#1', 'M#1', '0', 'Vm#4']
    processor: []
    mode: A1
    attribute: ['support_it_block']
    format: 'VZIP<c>.<size> <Dd>, <Dm>'
    decoder: |

      insn.mnem.set("vzip");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".");
      not_implemented("field: <size>");
      insn.add_oprd(reg(arm.Register("Dd", field("Dd"))));
      insn.add_oprd(reg(arm.Register("Dm", field("Dm"))));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T1
    attribute: []
    format: 'WFE<c>'
    decoder: |

      insn.mnem.set("wfe");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T2
    attribute: []
    format: 'WFE<c>.W'
    decoder: |

      insn.mnem.set("wfe");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '0', '0', '1', '0']
    processor: ['ARMv6K', 'ARMv7', 'ARMv6T2)']
    mode: A1
    attribute: []
    format: 'WFE<c>'
    decoder: |

      insn.mnem.set("wfe");
      insn.set_cond(arm.Condition(field("cond")));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T1
    attribute: []
    format: 'WFI<c>'
    decoder: |

      insn.mnem.set("wfi");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T2
    attribute: []
    format: 'WFI<c>.W'
    decoder: |

      insn.mnem.set("wfi");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '0', '0', '1', '1']
    processor: ['ARMv6K', 'ARMv7', 'ARMv6T2)']
    mode: A1
    attribute: []
    format: 'WFI<c>'
    decoder: |

      insn.mnem.set("wfi");
      insn.set_cond(arm.Condition(field("cond")));


    semantic: []

  - encoding: ['1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T1
    attribute: []
    format: 'YIELD<c>'
    decoder: |

      insn.mnem.set("yield");
      insn.add_attr("support-it-block");


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(0)', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1']
    processor: ['ARMv7', 'ARMv6T2)']
    mode: T2
    attribute: []
    format: 'YIELD<c>.W'
    decoder: |

      insn.mnem.set("yield");
      insn.add_attr("support-it-block");
      insn.mnem.add_suffix(".w");


    semantic: []

  - encoding: ['cond#4', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '(1)', '(1)', '(1)', '(1)', '(0)', '(0)', '(0)', '(0)', '0', '0', '0', '0', '0', '0', '0', '1']
    processor: ['ARMv6K', 'ARMv7', 'ARMv6T2)']
    mode: A1
    attribute: []
    format: 'YIELD<c>'
    decoder: |

      insn.mnem.set("yield");
      insn.set_cond(arm.Condition(field("cond")));


    semantic: []

  - encoding: ['1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '(1)', '(1)', '(1)', '(1)', '1', '0', '(0)', '0', '(1)', '(1)', '(1)', '(1)', '0', '0', '0', 'J#1', '(1)', '(1)', '(1)', '(1)']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'LEAVEX'
    decoder: |

      insn.mnem.set("leavex");


    semantic: []

  - encoding: ['0', '1', '0', '1', '1', '0', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'LDR<c> <Rt>, [<Rn>, <Rm>, LSL #2]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: LSL");
      not_implemented("operand: #2]");


    semantic: []

  - encoding: ['0', '1', '0', '1', '1', '0', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'LDRH<c> <Rt>, [<Rn>, <Rm>, LSL #1]'
    decoder: |

      insn.mnem.set("ldrh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: LSL");
      not_implemented("operand: #1]");


    semantic: []

  - encoding: ['0', '1', '0', '1', '1', '1', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'LDRSH<c> <Rt>, [<Rn>, <Rm>, LSL #1]'
    decoder: |

      insn.mnem.set("ldrsh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: LSL");
      not_implemented("operand: #1]");


    semantic: []

  - encoding: ['0', '1', '0', '1', '0', '0', '0', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'STR<c> <Rt>, [<Rn>, <Rm>, LSL #2]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: LSL");
      not_implemented("operand: #2]");


    semantic: []

  - encoding: ['0', '1', '0', '1', '0', '0', '1', 'Rm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E1 # HACK
    attribute: []
    format: 'STRH<c> <Rt>, [<Rn>, <Rm>, LSL #1]'
    decoder: |

      insn.mnem.set("strh");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));
      not_implemented("operand: LSL");
      not_implemented("operand: #1]");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', '0', '1', '0', 'N#1', 'Rm#4', 'Rn#3']
    processor: []
    mode: E1
    attribute: []
    format: 'CHKA<c> <Rn>, <Rm>'
    decoder: |

      insn.mnem.set("chka");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rn", field("Rn"))));
      insn.add_oprd(reg(arm.Register("Rm", field("Rm"))));


    semantic: []

  - encoding: ['1', '1', '0', '0', '0', '0', '1', 'L#1', 'handler#8']
    processor: []
    mode: E1
    attribute: []
    format: 'HB{L}<c> #<handler8>'
    decoder: |

      insn.mnem.set("hb");
      if (field("D"))
        insn.mnem.add_suffix("L");
      insn.add_attr("support-it-block");
      not_implemented("operand: #<handler8>");


    semantic: []

  - encoding: ['1', '1', '0', '0', '0', '1', 'imm#5', 'handler#5']
    processor: []
    mode: E1
    attribute: []
    format: 'HBLP<c> #<imm>, #<handler5>'
    decoder: |

      insn.mnem.set("hblp");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("i")));
      not_implemented("operand: #<handler5>");


    semantic: []

  - encoding: ['1', '1', '0', '0', '0', '0', '0', '0', 'imm#3', 'handler#5']
    processor: []
    mode: E1
    attribute: []
    format: 'HBP<c> #<imm>, #<handler5>'
    decoder: |

      insn.mnem.set("hbp");
      insn.add_attr("support-it-block");
      insn.add_oprd(int(32, field("i")));
      not_implemented("operand: #<handler5>");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', '1', '0', 'imm#6', 'Rt#3']
    processor: []
    mode: E1
    attribute: []
    format: 'LDR<c> <Rt>, [R9{,#<disp>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [R9{,#<disp>}]");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', '0', '1', '1', 'imm#5', 'Rt#3']
    processor: []
    mode: E2
    attribute: []
    format: 'LDR<c> <Rt>, [R10{,#<disp>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [R10{,#<disp>}]");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', '0', '0', 'imm#3', 'Rn#3', 'Rt#3']
    processor: []
    mode: E3
    attribute: []
    format: 'LDR<c> <Rt>, [<Rn>{,#-<imm>}]'
    decoder: |

      insn.mnem.set("ldr");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [<Rn>{,#-<imm>}]");


    semantic: []

  - encoding: ['1', '1', '0', '0', '1', '1', '1', 'imm#6', 'Rt#3']
    processor: []
    mode: E1
    attribute: []
    format: 'STR<c> <Rt>, [R9, #<imm>]'
    decoder: |

      insn.mnem.set("str");
      insn.add_attr("support-it-block");
      insn.add_oprd(reg(arm.Register("Rt", field("Rt"))));
      not_implemented("operand: [R9");
      not_implemented("operand: #<imm>]");


    semantic: []

